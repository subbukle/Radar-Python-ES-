import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, lfilter

# 1. Simulate Radar Signal
def generate_radar_signal(duration, sampling_rate, signal_freq, noise_level):
    """
    Generate a simulated radar signal with added noise.
    """
    t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)
    signal = np.sin(2 * np.pi * signal_freq * t)  # Pure sinusoidal signal
    noise = noise_level * np.random.randn(len(t))  # Gaussian noise
    return t, signal + noise

# 2. Low-Pass Filter
def low_pass_filter(data, cutoff_freq, sampling_rate, order=4):
    """
    Apply a Butterworth low-pass filter to the data.
    """
    nyquist = 0.5 * sampling_rate
    normal_cutoff = cutoff_freq / nyquist
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    filtered_data = lfilter(b, a, data)
    return filtered_data

# 3. FFT Analysis
def compute_fft(data, sampling_rate):
    """
    Compute the FFT of the signal.
    """
    N = len(data)
    fft_data = np.fft.fft(data)
    fft_freq = np.fft.fftfreq(N, 1 / sampling_rate)
    return fft_freq[:N // 2], np.abs(fft_data[:N // 2])  # Return positive frequencies

# 4. Main Function to Demonstrate Filtering and FFT
#if __name__ == "__main__":
    # Parameters
    duration = 1.0  # 1 second
    sampling_rate = 1000  # 1000 Hz
    signal_freq = 50  # 50 Hz signal
    noise_level = 0.5  # Noise amplitude
    cutoff_freq = 100  # Low-pass filter cutoff frequency

    # Generate Radar Signal
    t, noisy_signal = generate_radar_signal(duration, sampling_rate, signal_freq, noise_level)

    # Apply Low-Pass Filter
    filtered_signal = low_pass_filter(noisy_signal, cutoff_freq, sampling_rate)

    # FFT Analysis (Before and After Filtering)
    fft_freq, fft_noisy_signal = compute_fft(noisy_signal, sampling_rate)
    _, fft_filtered_signal = compute_fft(filtered_signal, sampling_rate)

    # Plot Results
    plt.figure(figsize=(12, 8))

    # Original Signal
    plt.subplot(3, 1, 1)
    plt.plot(t, noisy_signal, label="Noisy Signal")
    plt.plot(t, filtered_signal, label="Filtered Signal", linestyle='--')
    plt.title("Time Domain Signal")
    plt.xlabel("Time (s)")
    plt.ylabel("Amplitude")
    plt.legend()

    # FFT of Noisy Signal
    plt.subplot(3, 1, 2)
    plt.plot(fft_freq, fft_noisy_signal, label="Noisy Signal FFT")
    plt.title("FFT Before Filtering")
    plt.xlabel("Frequency (Hz)")
    plt.ylabel("Amplitude")
    plt.legend()

    # FFT of Filtered Signal
    plt.subplot(3, 1, 3)
    plt.plot(fft_freq, fft_filtered_signal, label="Filtered Signal FFT", color='green')
    plt.title("FFT After Filtering")
    plt.xlabel("Frequency (Hz)")
    plt.ylabel("Amplitude")
    plt.legend()

    plt.tight_layout()
    plt.show()
